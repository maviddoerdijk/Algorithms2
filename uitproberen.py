queries = ["Classified information", "Leiden University", "Algorithms and Data Structures"]


        # # without caesar shift
        # ob = IntelDevice(3,5,[],[],0)
        # answers =[
        #     "1000011 1101100 1100001 1110011 1110011 1101001 1100110 1101001 1100101 1100100 100000 1101001 1101110 1100110 1101111 1110010 1101101 1100001 1110100 1101001 1101111 1101110",
        #     "1001100 1100101 1101001 1100100 1100101 1101110 100000 1010101 1101110 1101001 1110110 1100101 1110010 1110011 1101001 1110100 1111001",
        #     "1000001 1101100 1100111 1101111 1110010 1101001 1110100 1101000 1101101 1110011 100000 1100001 1101110 1100100 100000 1000100 1100001 1110100 1100001 100000 1010011 1110100 1110010 1110101 1100011 1110100 1110101 1110010 1100101 1110011"
        # ] 


        # # with caesar shift 8
        # ob = IntelDevice(3,5,[],[],8)
answers =[
    "1001011 1110100 1101001 1111011 1111011 1110001 1101110 1110001 1101101 1101100 101000 1110001 1110110 1101110 1110111 1111010 1110101 1101001 1111100 1110001 1110111 1110110",
    "1010100 1101101 1110001 1101100 1101101 1110110 101000 1011101 1110110 1110001 1111110 1101101 1111010 1111011 1110001 1111100 10000001",
    "1001001 1110100 1101111 1110111 1111010 1110001 1111100 1110000 1110101 1111011 101000 1101001 1110110 1101100 101000 1001100 1101001 1111100 1101001 101000 1011011 1111100 1111010 1111101 1101011 1111100 1111101 1111010 1101101 1111011"
] 

def encode_message(msg):
    encoded_msg = ''

    for letter in msg:
        num_representation = int(ord(str(letter))) + 8
        bitstring = '{0:b}'.format(num_representation)
        encoded_msg += str(bitstring)
        encoded_msg += ' '
    return encoded_msg

for query, answer in zip(queries, answers):
    print(encode_message(query), 'quer', answer,'ans')
    if query == answer:
        print(True)
    else:
        print(False)

